// <auto-generated />
using System;
using ChessMaster.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChessMaster.Infrastructure.Migrations.PostgreSql
{
    [DbContext(typeof(ChessMasterDbContext))]
    partial class ChessMasterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChessMaster.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("User_Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Password_Hash");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Salt");

                    b.HasKey("UserId")
                        .HasName("PK_Accounts_UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Accounts_Email");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("ChessMaster.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("BlackPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("Black_Player_Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Creation_Time");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("Creator_User_Id");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("End_Time");

                    b.Property<string>("Fen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Fen");

                    b.Property<int>("GameState")
                        .HasColumnType("integer")
                        .HasColumnName("State");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Start_Time");

                    b.Property<Guid?>("WhitePlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("White_Player_Id");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("Winner_Id");

                    b.HasKey("Id")
                        .HasName("PK_Games_Id");

                    b.HasIndex("BlackPlayerId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("WhitePlayerId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("ChessMaster.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id")
                        .HasName("PK_Users_Id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ChessMaster.Domain.Entities.Account", b =>
                {
                    b.HasOne("ChessMaster.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("ChessMaster.Domain.Entities.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_Users_UserId");
                });

            modelBuilder.Entity("ChessMaster.Domain.Entities.Game", b =>
                {
                    b.HasOne("ChessMaster.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("BlackPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Games_Users_BlackPlayerId");

                    b.HasOne("ChessMaster.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Games_Users_CreatorUserId");

                    b.HasOne("ChessMaster.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("WhitePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Games_Users_WhitePlayerId");
                });
#pragma warning restore 612, 618
        }
    }
}
