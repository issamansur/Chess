using ChessMaster.Application.DI;

using ChessMaster.Infrastructure;
using ChessMaster.Infrastructure.Services;

using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Authentication.JwtBearer;

// BUILDER
var builder = WebApplication.CreateBuilder(args);

// BD Services
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");

builder.Services.AddDbContext<ChessMasterDbContext>(options =>
{
    options.UseNpgsql(connectionString);
});

// Other User Services from other layers
builder.Services.AddApplication();
builder.Services.AddInfrastructure();

// Autogenerated Services
builder.Services.AddControllers();

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

//builder.Services.Configure<JwtSettings>(builder.Configuration.GetSection("JwtSettings"));
builder.Services
    .AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer
(
    options =>
    {
        options.RequireHttpsMetadata = false;
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidIssuer = JwtSettings.ISSUER,
            
            ValidateAudience = true,
            ValidAudience = JwtSettings.AUDIENCE,
            
            ValidateLifetime = true,
            
            IssuerSigningKey = JwtSettings.GetSymmetricSecurityKey(),
            ValidateIssuerSigningKey = true,
        };
    }
);


// APP
var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();